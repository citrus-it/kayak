#!/bin/bash
#
# {{{ CDDL HEADER
#
# This file and its contents are supplied under the terms of the
# Common Development and Distribution License ("CDDL"), version 1.0.
# You may only use this file in accordance with the terms of version
# 1.0 of the CDDL.
#
# A full copy of the text of the CDDL should have accompanied this
# source. A copy of the CDDL is also available via the Internet at
# http://www.illumos.org/license/CDDL.
# }}}
#
# Copyright 2025 OmniOS Community Edition (OmniOSce) Association.
#

SRCDIR=`dirname $0`
[ ${SRCDIR:0:1} = "/" ] || SRCDIR=`pwd`/$SRCDIR

. $SRCDIR/../lib/defs.sh
. $SRCDIR/../lib/hvm_help.sh
. $SRCDIR/../lib/utils.sh

typeset -i QEMU=0
typeset -i RPI=0

while getopts "qr" opt; do
    case $opt in
        q)  QEMU=1 ;;
        r)  RPI=1 ;;
        *)  print -u2 "Syntax: $0 [-qr]"; exit 2 ;;
    esac
done

# If nothing is specified, build everything
if ((QEMU + RPI == 0)); then
    QEMU=1
    RPI=1
fi

[ -z "$BUILDSEND_MP" ] && BUILDSEND_MP=/kayak_image

find_zfssend aarch64
[ ! -f $ZFSSEND ] && echo "ZFS Image ($ZFSSEND) missing" && exit

note() {
    tput setaf 6
    echo "***"
    echo "*** $*"
    echo "***"
    tput sgr0
}

fail() {
    note "$@" >&2
    exit 1
}

set -e

customise() {
    typeset root="${1?altroot}"

    img_permit_rootlogin $root without-password
    img_dedicated_home $root

    log "... installing noautofs profile"
    img_install_profile $root $SRCDIR/../etc/noautofs.xml

    img_install_profile $root $SRCDIR/../etc/rsyslog.xml
    logadm_rsyslog $root

    # Install the postboot service
    img_install_service $root system $SRCDIR/../smf/initial-boot{.xml,}

    # This is KMF_DEADBEEF|KMF_REDZONE
    echo "set kmem_flags = 0x6" > $root/etc/system.d/kmem_flags

    sed -i 's/PASSREQ=YES/PASSREQ=NO/' $root/etc/default/login

    # Set the default timezone to UTC (it's PST in illumos-gate)
    img_set_timezone $root UTC

    # Drop a boot config override into the loader configs to allow booting from
    # an implementation architecture, to prefer the serial console, and to boot
    # verbosely.
    cat << 'EOM' > $root/boot/conf.d/00-aarch64-defaults.conf
bootfile="/platform/${IMPLARCH}/kernel/${ISADIR}/unix;/platform/${BASEARCH}/kernel/${ISADIR}/unix"
console="${default-uart-name},text"
boot-args="-vm verbose"
EOM

    # Enable the extra repo
    pkg -R "$root" set-publisher --no-refresh -O $OOCEBRAICHURL $EXTRAPUB
    for m in $MIRRORS; do
        pkg -R "$root" set-publisher --no-refresh \
            -m https://$m.$MIRRORDOMAIN/bloody/braich $EXTRAPUB
    done
    setpaths $root $EXTRAPATH $EXTRASUPATH

    # On first boot, create swap and dump, and turn autoexpansion on for the
    # root. We don't do this in the image to keep the size down.
    # Note that swap is created as a sparse volume (we hope it will never
    # be written to, but it needs to exist).
    img_postboot_block $root << EOM
/sbin/zpool set cachefile=none $HVMrpool
/sbin/zpool set autoexpand=on $HVMrpool
/sbin/zfs create -sV 1G -b 4096 \
    -o logbias=throughput -o primarycache=metadata -o secondarycache=none \
    $HVMrpool/swap
/sbin/zfs create -V 1G -b 4096 \
    -o logbias=throughput -o primarycache=metadata -o secondarycache=none \
    $HVMrpool/dump
print "/dev/zvol/dsk/$HVMrpool/swap - - swap - no -" >> /etc/vfstab
/usr/sbin/dumpadm -y -c curproc -d /dev/zvol/dsk/$HVMrpool/dump
/sbin/zpool set cachefile=/etc/zfs/zpool.cache $HVMrpool
EOM

    # Create the boot archive.
    pushd $root

    zpool set bootfs=$HVMtmprpool/ROOT/$HVMbename $HVMtmprpool

    cat ./etc/system.d/* > ./etc/system.d/.self-assembly

    mkdir -p ./platform/armv8/aarch64
    ./boot/solaris/bin/create_ramdisk -R $root -p aarch64 -f cpio \
        || fail "Could not create boot archive"
    typeset filelist=./platform/armv8/aarch64/archive_cache
    ./boot/solaris/bin/extract_boot_filelist \
        -R $root -p aarch64 boot/solaris/filelist.ramdisk \
        | while read file; do
            [ -e "$file" ] && find "$file" -type f
        done | awk '{printf("/%s=%s\n", $1, $1)}' > $filelist
    chmod 644 $filelist

    $SRCDIR/../bin/barn -R $PWD -w $filelist
    touch ./boot/solaris/timestamp.cache

    popd
}

customise_qemu() {
    typeset root="${1?altroot}"

    customise "$root"

    cp $SRCDIR/../bin/u-boot.qemu_arm64_defconfig \
        $BUILDSEND_MP/braich-$VERSION.u-boot
    cp $root/boot/loader64.efi $BUILDSEND_MP/braich-$VERSION.loader
}

customise_rpi4() {
    typeset root="${1?altroot}"

    customise "$root"

    # The rpi4 does not have a battery and so the system clock comes up in
    # 2015. Enable chrony by default and configure it so that it's allowed to
    # step the time.

    log "... configuring chrony"
    img_install_profile $root $SRCDIR/../etc/chrony.xml

    cat << EOM > $root/etc/inet/chrony.conf
pool 0.omnios.pool.ntp.org iburst
driftfile /var/lib/chrony/drift
ntsdumpdir /var/lib/chrony
pidfile /var/run/chrony/chronyd.pid
makestep 900 -1
EOM

    cp $SRCDIR/../bin/u-boot.rpi_4_defconfig \
        $BUILDSEND_MP/braich-rpi4-$VERSION.u-boot
    cp $root/boot/loader64.efi $BUILDSEND_MP/braich-rpi4-$VERSION.loader
}

##############################################################################
# Build a disk image suitable for running under QEMU

export_raw() {
    typeset basef="$1"
    typeset lofi="$2"

    note "Creating raw disk image (${basef##*/})"

    rm -f $basef.raw
    dd if=$lofi of=$basef.raw bs=2048 status=progress

    note "Compressing"

    zstd -9fv --rm $basef.raw
}

make_bootfs() {
    # Format and populate the boot partition with the files needed to boot

    FAT_RAW=${HVMrlofi/p0/s0}
    FAT_BLK=${HVMlofi/p0/s0}

    typeset boot=`mktemp -d`
    yes | sudo mkfs -F pcfs -o fat=32,b=bootfs $FAT_RAW || true
    sudo mount -F pcfs $FAT_BLK $boot
    [ -d "$boot" ] || fail "Failed to create boot fs"

    printf "%s" $boot
}

build_qemu() {
    typeset basef="$1"

    note "Building QEMU image"

    HVM_Image_Init 8G rpool braich omnios-r$VERSION
    HVM_Image_Build "-B -o ashift=12" \
        $ZFSSEND braich customise_qemu -noactivate
    HVM_Image_Finalise 1 "/dev/dsk/c1t0d0s1" \
        "/virtio_mmio@a003c00/vioblk@a003c00/blkdev@0,0:b" "" \
        -keeplofi

    typeset boot=`make_bootfs`

    mkdir -p $boot/EFI/BOOT
    cp $basef.loader $boot/EFI/BOOT/bootaa64.efi

    umount $boot
    rm -rf $boot

    export_raw $basef $HVMlofi

    lofiadm -d $HVMlofi
    zfs destroy -r $HVMdataset
}

build_rpi4() {
    typeset basef="$1"; shift

    note "Building EFI rpi4 image"

    # Keep it small so it's quick to write to the SD card. It will
    # auto-expand on first boot.
    HVM_Image_Init 2G rpool braich omnios-r$VERSION
    HVM_Image_Build "-B -o bootsize=256M -o ashift=9" \
        $ZFSSEND braich customise_rpi4 -noactivate

    slice=1

    HVM_Image_Finalise $slice \
        "/dev/dsk/c1t0d0s$slice" "/emmc2bus/mmc@7e340000/blkdev@0,0:b" "" \
        -keeplofi

    typeset boot=`make_bootfs`

    # The boot sequence is:
    #   - ROM stage1 bootloader
    #   - SPI flash stage2 bootloader (was bootcode.bin on previous models)
    #   - arm trusted firmware bl31.bin
    #   - u-boot
    #   - loader
    #   - illumos kernel

    mkdir -p $boot/EFI/BOOT
    cp $basef.u-boot $boot/u-boot.bin
    cp $basef.loader $boot/EFI/BOOT/bootaa64.efi

    cp $SRCDIR/../bin/bl31.bin $boot/

	for f in \
        COPYING.linux \
        LICENCE.broadcom \
        bootcode.bin \
        fixup4cd.dat \
        start4cd.elf \
        bcm2711-rpi-4-b.dtb \
        bcm2712-rpi-5-b.dtb
	do
		cp $SRCDIR/../bin/firmware-1.20*/boot/$f $boot/
	done
    mkdir -p $boot/overlays
    cp $SRCDIR/../bin/firmware-1.20*/boot/overlays/* $boot/overlays

    cat << EOM > $boot/config.txt
arm_boost=1
gpu_mem=16
start_file=start4cd.elf
fixup_file=fixup4cd.dat
arm_64bit=1
enable_gic=1
armstub=bl31.bin
kernel=u-boot.bin
dtoverlay=mmc
dtoverlay=disable-wifi
# The following two lines disable the mini UART and set the first PL011 UART as
# the primary UART - that which is presented on GPIO14/GPIO15. The mini UART
# is less capable and its baud rate is linked to the VCPU clock speed.
enable_uart=1
dtoverlay=disable-bt
EOM

    umount $boot
    rm -rf $boot

    export_raw $basef $HVMlofi

    lofiadm -d $HVMlofi
    zfs destroy -r $HVMdataset
}

((QEMU)) && build_qemu $BUILDSEND_MP/braich-$VERSION
((RPI)) && build_rpi4 $BUILDSEND_MP/braich-rpi4-$VERSION

# Vim hints
# vim:ts=4:sw=4:et:fdm=marker
